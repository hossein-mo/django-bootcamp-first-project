from base_models import Column, UserRole, BaseModel
from datetime import datetime, date
from typing import Union
import os
import sys
from model_exceptions import NotEnoughBalance
from mysql.connector import Error as dbError

sys.path.append(os.path.dirname(os.path.dirname(__file__)))
from utils.utils import hash_password


class User(BaseModel):
    name = "user"
    id = Column("id", "INT UNSIGNED", primary_key=True, auto_increment=True)
    username = Column("username", "VARCHAR(255)", unique=True)
    password = Column("password", "CHAR(64)")
    email = Column("email", "VARCHAR(255)", unique=True)
    phone_number = Column("phone_number", "VARCHAR(255)", null=True)
    wallet = Column("wallet", "INT UNSIGNED")
    role = Column(
        "role", f"ENUM({UserRole.get_comma_seperated()})", default=UserRole.USER.value
    )
    birth_date = Column("birth_date", "DATE")
    register_date = Column("register_date", "DATETIME")
    last_login = Column("last_login", "DATETIME")

    def __init__(
        self,
        username: str,
        password: str,
        email: str,
        phone_number: str,
        wallet: int,
        role: Union[str, UserRole],
        birth_date: date,
        register_date: datetime,
        last_login: datetime,
        id: Union[int, None] = None,
    ) -> None:
        """Constructor for user model

        Args:
            username (str): username
            password (str): user password
            email (str): user email
            phone_number (str): user phone_number
            wallet (int): user wallet
            role (Union[str, UserRole]): user role
            birth_date (date): user birth_date
            register_date (datetime): user register_date
            last_login (datetime): user last_login
            id (Union[int, None], optional): user id generated by db when inserting. Defaults to None.
        """
        self.id = id
        self.username = username
        self.password = password
        self.email = email
        self.role = UserRole(role)
        self.birth_date = birth_date
        self.register_date = register_date
        self.last_login = last_login
        self.phone_number = phone_number
        self.wallet = wallet

    @classmethod
    def create_new(
        cls,
        username: str,
        password: str,
        email: str,
        phone_number: str,
        role: Union[str, UserRole],
        birth_date: date,
        register_date: datetime,
        last_login: datetime,
    ) -> "User":
        """_summary_

        Args:
            username (str): username
            password (str): user password
            email (str): user email
            phone_number (str): user phone_number
            role (Union[str, UserRole]): user role
            birth_date (date): user birth_date
            register_date (datetime): user register_date
            last_login (datetime): user last_login

        Returns:
            User: return a User instance with specified inputs with \
                wallet balance set to zero and hashed password.
        """
        password = hash_password(password)
        wallet = 0
        return cls(
            username,
            password,
            email,
            phone_number,
            wallet,
            role,
            birth_date,
            register_date,
            last_login,
        )


class BankAccount(BaseModel):
    name = "bank_account"
    id = Column("id", "INT UNSIGNED", primary_key=True, auto_increment=True)
    card_number = Column("card_number", "CHAR(16)")
    cvv2 = Column("cvv2", "varchar(255)")
    password = Column("password", "CHAR(64)")
    balance = Column("balance", "INT UNSIGNED")
    user_id = Column(
        "user_id", "INT UNSIGNED", foreign_key=User.id.name, reference=User.name
    )

    def __init__(
        self,
        card_number: str,
        cvv2: str,
        password: str,
        balance: int,
        user_id: int,
        id: Union[None, int] = None,
    ) -> None:
        """Constructor for bank account model

        Args:
            card_number (str): card number
            cvv2 (str): cvv2
            password (str): card password
            balance (int): account balance
            user_id (int): account owner user id
            id (Union[None, str], optional): bank account id. Defaults to None.
        """
        self.id = id
        self.card_number = card_number
        self.cvv2 = cvv2
        self.password = password
        self.balance = balance
        self.user_id = user_id

    def deposit(self, amount: int) -> None:
        """Add amount to user's balance and update database.

        Args:
            amount (int): amount to deposit
        """
        self.balance += amount
        self.update({BankAccount.balance: self.balance})

    def transfer(self, other: "BankAccount", amount: int):
        """Transfer amount from instance balance to destination instance balance.

        Args:
            other (BankAccount): destination account
            amount (int): amount of transfer

        Raises:
            NotEnoughBalance: if amount > origin account balance.
        """
        if amount > self.balance:
            raise NotEnoughBalance
        else:
            self.balance -= amount
            other.balance += amount
            query1 = self.update_query({BankAccount.balance: self.balance})
            query2 = other.update_query({BankAccount.balance: other.balance})
            try:
                self.db_obj.transaction([query1, query2])
            except dbError as err:
                print(f'Error while updating rows in "{self.name}".')
                print(f"Error description: {err}")

    @classmethod
    def create_new(
        cls, card_number: str, cvv2: str, password: str, balance: int, user_id: int
    ) -> "BankAccount":
        """_summary_

        Args:
            card_number (str): card number
            cvv2 (str): cvv2
            password (str): card password
            balance (int): account balance
            user_id (int): account owner user id

        Returns:
            BankAccount: return an instance of BankAccount with hashed password
        """
        password = hash_password(password)
        return cls(card_number, cvv2, password, balance, user_id)
