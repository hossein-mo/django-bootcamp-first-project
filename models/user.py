from datetime import datetime, date
from typing import Union

from models.database import DatabaseConnection
from models.base_models import Column, UserRole, BaseModel

class User(BaseModel):
    name = "user"
    id = Column("id", "INT UNSIGNED", primary_key=True, auto_increment=True)
    username = Column("username", "VARCHAR(255)")
    password = Column("password", "CHAR(64)")
    email = Column("email", "VARCHAR(255)")
    phone_number = Column("phone_number", "VARCHAR(255)", null=True)
    wallet = Column("wallet", "INT UNSIGNED")
    role = Column(
        "role", f"ENUM({UserRole.get_comma_seperated()})", default=UserRole.USER.value
    )
    birth_date = Column("birth_date", "DATE")
    register_date = Column("register_date", "DATETIME")
    last_login = Column("last_login", "DATETIME")

    def __init__(
        self,
        username: str,
        password: str,
        email: str,
        phone_number: str,
        wallet: int,
        role: Union[str, UserRole],
        birth_date: date,
        register_date: datetime,
        last_login: datetime,
        id: Union[int, None] = None,
    ) -> None:
        """Constructor for user model

        Args:
            username (str): username
            password (str): user password
            email (str): user email
            phone_number (str): user phone_number
            wallet (int): user wallet
            role (Union[str, UserRole]): user role
            birth_date (date): user birth_date
            register_date (datetime): user register_date
            last_login (datetime): user last_login
            id (Union[int, None], optional): user id generated by db when inserting. Defaults to None.
        """
        self.id = id
        self.username = username
        self.password = password
        self.email = email
        self.role = UserRole(role)
        self.birth_date = birth_date
        self.register_date = register_date
        self.last_login = last_login
        self.phone_number = phone_number
        self.wallet = wallet
        self.subscription = None
        bank_accounts = list()

    @staticmethod
    def login(username:str, hash_password:str) -> bool:
        return UserRepo.login(username, hash_password)
    

class UserRepo:

    @staticmethod
    def login(username, password) -> bool:
        conn = DatabaseConnection().get_connection()
        cursor = conn.cursor()
        cursor.execute(f'SELECT COUNT(*) from {User.name} WHERE ({User.username.name}={username} OR {User.email.name}={username} OR \
                       {User.phone_number.name}={username}) AND {User.password.name}={password}')
        row = cursor.fetchone()
        cursor.close()
        return bool(row[0])