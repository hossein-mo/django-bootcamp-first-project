from typing import Union
import mysql.connector

from controllers.exceptions import *
from models.database import DatabaseConnection
from models.base_models import Column, BaseModel
from models.user import User

class BankAccount(BaseModel):
    name = "bank_account"
    uuid = Column("uuid", "CHAR(36)", primary_key=True, as_string=False)
    card_number = Column("card_number", "CHAR(16)")
    cvv2 = Column("cvv2", "varchar(255)")
    password = Column("password", "CHAR(64)")
    balance = Column("balance", "INT UNSIGNED")
    user_id = Column(
        "user_id", "INT UNSIGNED", foreign_key=User.id.name, reference=User.name
    )

    def __init__(
        self,
        card_number: str,
        cvv2: str,
        password: str,
        balance: int,
        user_id: int,
        uuid: Union[None, str] = None,
    ) -> None:
        """Constructor for bank account model

        Args:
            card_number (str): card_number
            cvv2 (str): cvv2
            password (str): card password
            balance (int): account balance
            user_id (int): account owner user id
            uuid (Union[None, str], optional): uuid generated by database when inserting. Defaults to None.
        """
        if uuid:
            self.uuid = uuid
        else:
            self.uuid = "UUID()"
        self.card_number = card_number
        self.cvv2 = cvv2
        self.password = password
        self.balance = balance
        self.user_id = user_id

    def deposit(self, amount:int) -> None:
        BankRepo.deposit(self, amount)
        self.balance += amount

    def withdraw(self, amount:int) -> None:
        BankRepo.withdraw(self, amount)
        self.balance -= amount

    def transfer(self, other:'BankAccount', amount:int):
        BankRepo.transfer(self, other, amount)
        self.balance -= amount
        other.balance += amount
    
    def delete(self):
        BankRepo.delete_account(self)

    @staticmethod    
    def update_account(account:'BankAccount'):
        BankRepo.update_account(account)
    
    @staticmethod
    def add_new_account(account:'BankAccount'):
        BankRepo.add_new_account(account)

class BankRepo:

    @staticmethod
    def add_new_account(account: BankAccount):
        try:
            BankAccount.insert(account)
        except mysql.connector.Error as err:
            raise InsertFailed("Some problem occurred while registering new account. Try again!")
        
    @staticmethod
    def edit_account(account: BankAccount):
        try:
            conn = DatabaseConnection.get_connection()
            cursor = conn.cursor()
            query = f'UPDATE {BankAccount.name} SET {BankAccount.card_number.name} = %s, {BankAccount.cvv2.name} = %s, \
                        {BankAccount.password.name} = %s WHERE {BankAccount.uuid.name} = %s'
            print(query)
            cursor.execute(query, (account.card_number, account.cvv2, account.password, account.uuid,))
            conn.commit()
        except mysql.connector.Error as err:
            raise UpdateFailed("Some problem occurred while editing bank account. Try again!")
        finally:
            cursor.close()
        
    @staticmethod
    def delete_account(account: BankAccount):
        try:
            conn = DatabaseConnection.get_connection()
            cursor = conn.cursor()
            cursor.execute(f'DELETE FROM {BankAccount.name} WHERE {BankAccount.uuid.name} = %s', (account.uuid,))
            conn.commit()
        except mysql.connector.Error as err:
            raise DeleteFailed("Some problem occurred while removing account. Try again!")
        finally:
            cursor.close()
    
    @staticmethod
    def transfer(origin:BankAccount, destination:BankAccount, amount:int):
        conn = DatabaseConnection.get_connection()
        cursor = conn.cursor()
        balance_field = BankAccount.balance.name
        try:
            cursor.execute("START TRANSACTION")
            query = f'UPDATE {BankAccount.name} SET {balance_field} = {balance_field} - {amount} WHERE {BankAccount.uuid.name} = %s'
            cursor.execute(query, (origin.uuid,))
            query = f'UPDATE {BankAccount.name} SET {balance_field} = {balance_field} + {amount} WHERE {BankAccount.uuid.name} = %s'
            cursor.execute(query, (destination.uuid,))
            conn.commit()
        except mysql.connector.Error as err:
            conn.rollback()
            raise UpdateFailed("Some problem occurred while transferring money. Try again!")
        finally:
            cursor.close()

    @staticmethod
    def withdraw(account:BankAccount, amount:int):
        try:
            conn = DatabaseConnection.get_connection()
            cursor = conn.cursor()
            balance_field = BankAccount.balance.name
            query = f'UPDATE {BankAccount.name} SET {balance_field} = {balance_field} - {amount} WHERE {BankAccount.uuid.name} = %s'
            cursor.execute(query, (account.uuid,))
            conn.commit()
        except mysql.connector.Error as err:
            raise UpdateFailed("Some problem occurred while withdrawing money. Try again!")
        finally:
            cursor.close()

    @staticmethod
    def deposit(account:BankAccount, amount:int):
        try:
            conn = DatabaseConnection.get_connection()
            cursor = conn.cursor()
            balance_field = BankAccount.balance.name
            query = f'UPDATE {BankAccount.name} SET {balance_field} = {balance_field} + {amount} WHERE {BankAccount.uuid.name} = %s'
            cursor.execute(query, (account.uuid,))
            conn.commit()
        except mysql.connector.Error as err:
            raise UpdateFailed("Some problem occurred while depositing money. Try again!")
        finally:
            cursor.close()
